@inherits LayoutComponentBase
@using MoneyMate.Components.Pages
@using MoneyMate.Models;
@using MoneyMate.Helpers;
@using MoneyMate.Components.ui
@inject GlobalState GlobalState
@if (!isAuthenticated)
{
    <main>
        <Login @bind-isAuthenticated="isAuthenticated" />
    </main>
}
else
{
    <div class="relative flex flex-col sm:flex-row">
        <div class="bg-white sm:w-[250px] sm:h-screen sm:sticky sm:top-0">
            <NavMenu />
        </div>

        <main class="flex-1">
            <nav class="z-[9] sticky top-0 hidden max-h-[4.5rem] w-full items-center justify-between bg-white px-9 sm:flex">
                <div class="relative flex w-full flex-col py-4">
                    <p class="text-2xl font-bold">Welcome @authUser.username</p>
                    <p class="absolute bottom-1 w-full text-sm text-gray-400">You've spent <FormatNumber amount="@GlobalState.totalExpenses" /> this month</p>
                </div>
                <div>
                    <Button OnClick="ShowLogoutModal" Color="Color.Green8" Type="primary">Log out</Button>
                </div>
                <Modal
                OkText="@("Log Out")"
                Centered="true"
                @bind-Visible="logoutModalVisible"
                OnOk="HandleLogoutAsync"
                OnCancel="HandleCancel">
                    <p>Are you sure you want to Log out?</p>
                </Modal>
            </nav>
            <article class="content max-w-screen min-h-screen bg-gray-300 px-4 sm:max-w-[calc(100vw-250px)]">
                @Body
            </article>
        </main>
    </div>
}

@code {
    private bool isAuthenticated = false; 
    private bool logoutModalVisible = false;
    private UserModel authUser = UserHelper.getSession();
    private void ShowLogoutModal()
    {
        logoutModalVisible = true;
    }

    private async Task HandleLogoutAsync()
    {
        await Task.Delay(500);
        isAuthenticated = false;
        logoutModalVisible = false;

    }

    private void HandleCancel()
    {
        logoutModalVisible = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await TagsHelper.InitializeOrGetTags();
        
     
    }
    // subscribing to global state so it changes on value update
    protected override void OnInitialized()
    {
        GlobalState.OnChange += StateHasChanged;
        authUser = UserHelper.getSession();

    }
    // removing subscribe to global state after this comonent get onmounted
    public void Dispose()
    {
        GlobalState.OnChange -= StateHasChanged;
    }


}
