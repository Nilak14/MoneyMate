@page "/"
@using MoneyMate.Models
@using AntDesign.Charts
@using MoneyMate.Helpers
@using MoneyMate.Components.ui
@using Title = AntDesign.Charts.Title

<div class="grid-cols-1 mb-10 grid w-full gap-8 md:grid-cols-2 lg:grid-cols-3">
    <DashboardCard TransactionType="@TransactionType.Income" content="Total Income" />
    <DashboardCard TransactionType="@TransactionType.Expense" content="Total Expenses" />
    <DashboardCard TransactionType="@TransactionType.Debt" content="Total Debt" />
</div>

<div class="container mx-auto flex flex-wrap gap-5">
    <!-- Weekly Chart Container -->
    <div class="border-2 flex-1 min-w-full rounded-md border-black bg-white p-4 lg:min-w-[45%]">
        <h1 class="text-center text-xl font-bold">This Week</h1>
        <Tabs>
            <TabPane Tab="Income">
                <div class="w-full">
                    <BarGraph Data="weeklyIncomeData" Config="incomeConfig" />
                </div>
            </TabPane>
            <TabPane Tab="Expenditure">
                <div class="w-full">
                    <BarGraph Data="weeklyExpenditureData" Config="expenditureConfig" />
                </div>
            </TabPane>
        </Tabs>
    </div>

    <!-- Monthly Chart Container -->
    <div class="border-2 flex-1 min-w-full rounded-md border-black bg-white p-4 lg:min-w-[45%]">
        <h1 class="text-center text-xl font-bold">This Month</h1>
        <div class="w-full">
            <PieChart Data="monthlyPieData" Config="pieConfig" />
        </div>
    </div>
</div>

@code {
    private List<TransactionModel> allTransactions;

    // Weekly Income and Expenditure Data
    private object[] weeklyIncomeData;
    private object[] weeklyExpenditureData;

    // Monthly Pie Chart Data
    private object[] monthlyPieData;

    private readonly ColumnConfig incomeConfig = new ColumnConfig
        {
            XField = "day",
            YField = "amount",
            AutoFit = true,
            YAxis = new ValueAxis
            {
                Min = 0
            },
            Color = new[] { "#1a6179" },
        };

    private readonly ColumnConfig expenditureConfig = new ColumnConfig
        {
            XField = "day",
            YField = "amount",
            AutoFit = true,
            YAxis = new ValueAxis
            {
                Min = 0
            },
            Color = new[] { "#ae331b" },
        };

    private readonly PieConfig pieConfig = new PieConfig
        {
            AppendPadding = 10,
            InnerRadius = 0.6,
            Radius = 0.8,
            Padding = "auto",
            AngleField = "value",
            ColorField = "type",
            AutoFit = true,
        };

    protected override void OnInitialized()
    {
        allTransactions = TransactionHelper.GetAllTransactions();

        PrepareWeeklyData();
        PrepareMonthlyData();
    }

    private void PrepareWeeklyData()
    {
        var currentWeekStart = DateTime.Now.AddDays(-(int)DateTime.Now.DayOfWeek);
        var allDaysOfWeek = Enum.GetValues(typeof(DayOfWeek)).Cast<DayOfWeek>().ToArray();

        var weeklyTransactions = allTransactions
            .Where(t => t.transactionDate >= currentWeekStart)
            .GroupBy(t => t.transactionDate?.DayOfWeek);

        weeklyIncomeData = allDaysOfWeek.Select(day => new
        {
            day = day.ToString(),
            amount = weeklyTransactions
                .Where(g => g.Key == day)
                .Select(g => g.Where(t => t.transactionType == TransactionType.Income).Sum(t => t.amount))
                .FirstOrDefault()
        }).ToArray();

        weeklyExpenditureData = allDaysOfWeek.Select(day => new
        {
            day = day.ToString(),
            amount = weeklyTransactions
                .Where(g => g.Key == day)
                .Select(g => g.Where(t => t.transactionType == TransactionType.Expense).Sum(t => t.amount))
                .FirstOrDefault()
        }).ToArray();
    }

    private void PrepareMonthlyData()
    {
        var currentMonth = DateTime.Now.Month;
        var currentYear = DateTime.Now.Year;

        var monthlyTotals = allTransactions
            .Where(t => t.transactionDate?.Month == currentMonth && t.transactionDate?.Year == currentYear)
            .GroupBy(t => t.transactionType)
            .Select(g => new
            {
                type = g.Key.ToString(),
                value = g.Sum(t => t.amount)
            });

        monthlyPieData = monthlyTotals.ToArray();
    }
}
