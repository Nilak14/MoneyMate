@page "/login"
@using MoneyMate.Models
@using MoneyMate.Helpers
@using MoneyMate.Components.ui

<div class="flex min-h-screen items-center justify-center bg-gray-200">
    <form @onsubmit="HandleLogin" class="w-96 rounded bg-white p-6 shadow">

        <div class="mb-4 flex justify-center">
            <Logo />
        </div>

        <h1 class="mb-4 text-2xl font-bold">@FormTitle</h1>
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <p class="mb-4 text-sm text-red-500">@ErrorMessage</p>
        }
        <div class="mb-4">
            <label class="mb-1 block text-sm font-medium text-gray-700">Username</label>
            <Input required Type="text" Placeholder="Username" Size="InputSize.Large" @bind-Value="@Username">
                <Prefix>
                    <Icon Type="@IconType.Outline.User" />
                </Prefix>
            </Input>
        </div>
        <div class="mb-6">
            <label class="mb-1 block text-sm font-medium text-gray-700">Password</label>
            <InputPassword required @bind-Value="@Password" Placeholder="Password" Size="InputSize.Large">
                <Prefix>
                    <Icon Type="@IconType.Outline.Lock" />
                </Prefix>
            </InputPassword>
        </div>
        @if (authUser.currencyType == null)
        {
            <div class="mb-6">
                <label class="mb-1 block text-sm font-medium text-gray-700">Currency Type</label>
                <Select @bind-Value="@SelectedCurrency" OnChange="OnCurrencyChanged" TItem="UserCurrencyType" TItemValue="UserCurrencyType">
                    <SelectOptions>
                        @foreach (UserCurrencyType currency in Enum.GetValues(typeof(UserCurrencyType)))
                        {
                            <SelectOption TItem="UserCurrencyType" TItemValue="UserCurrencyType"
                            Value="@currency"
                            Label="@currency.ToString()" />
                        }
                    </SelectOptions>
                </Select>
            </div>
        }
        <button type="submit" class="w-full rounded bg-green-700 py-2 text-white hover:bg-green-600">
            @ButtonLabel
        </button>
    </form>
</div>

@code {
    [Parameter]
    public bool isAuthenticated { get; set; }
    [Parameter]
    public EventCallback<bool> IsAuthenticatedChanged { get; set; }
    public UserModel authUser = UserHelper.GetSession();
    private string Username = "";
    private string Password = "";
    private string ErrorMessage = "";
    private UserCurrencyType SelectedCurrency = UserCurrencyType.NPR;
    private string FormTitle = "Register";
    private string ButtonLabel = "Register Now";

    private void OnCurrencyChanged(UserCurrencyType curr)
    {
        SelectedCurrency = curr;
    }

    protected override void OnInitialized()
    {
        if (authUser != null && authUser.currencyType.HasValue)
        {
            FormTitle = "Login";
            ButtonLabel = "Login";
        }
    }

    private async Task HandleLogin()
    {
        if (authUser == null || !authUser.currencyType.HasValue)
        {
            if (string.IsNullOrWhiteSpace(Username) || string.IsNullOrWhiteSpace(Password))
            {
                ErrorMessage = "Username and Password are required.";
                return;
            }
            if (Password.Length <= 6)
            {
                ErrorMessage = "Password must be longer than 6 characters.";
                return;
            }
            authUser = new UserModel { username = Username, currencyType = SelectedCurrency, password = Password };
            UserHelper.RegisterUser(authUser);

            isAuthenticated = true;
            await IsAuthenticatedChanged.InvokeAsync(true);
        }
        else
        {
            if (UserHelper.ValidateLogin(Username, Password))
            {
                ErrorMessage = "";
                isAuthenticated = true;
                await IsAuthenticatedChanged.InvokeAsync(true);
            }
            else
            {
                ErrorMessage = "Invalid Credentials";
            }
        
        }
    }
}