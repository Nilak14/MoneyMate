@using System.ComponentModel.DataAnnotations;
@using System.Text.Json;
@using MoneyMate.Models;
@using MoneyMate.Helpers;
@inject IMessageService _message

<div class="w-full space-y-6 self-start">
    <Form Model="@ExpensesTransaction"
          OnFinish="OnFinish"
          OnFinishFailed="OnFinishFailed"
          LabelColSpan="8"
          WrapperColSpan="16">

        <div class="space-y-4">
            <!-- Title Input -->
            <FormItem Label="Title">
                <Input required @bind-Value="@ExpensesTransaction.title" />
            </FormItem>

            <!-- Amount Input -->
            <FormItem Label="Amount">
                <Input required Type="number" @bind-Value="@ExpensesTransaction.amount"  />
            </FormItem>

            <!-- Tag Dropdown -->
            <FormItem Label="Tag">
                <Select required @bind-Value="@ExpensesTransaction.transactionTagId"  TItem="string" TItemValue="string" >
                    <SelectOptions>
                        @foreach (var tag in tags)
                        {
                            <SelectOption TItem="string" TItemValue="string" Value="@tag.tagId" Label="@tag.tagName" />
                        }
                    </SelectOptions>
                </Select>
            </FormItem>

            <!-- Date Picker -->
            <FormItem Label="Date">
                <DatePicker DisabledDate="@(date => date > DateTime.Today)" @bind-Value="@ExpensesTransaction.transactionDate" class="w-full" />
            </FormItem>

            <!-- Note Input -->
            <FormItem Label="Note">
                <Input @bind-Value="@ExpensesTransaction.note" />
            </FormItem>

            <!-- Submit Button -->
            <FormItem WrapperColOffset="8" WrapperColSpan="16">
                <Button  Loading="@IsLoading" Color="Color.Green8" Type="primary" Class="w-full" HtmlType="submit">
                    Add Expenses
                </Button>
                
            </FormItem>
        </div>
    </Form>
</div>


@code {
    [Parameter]
    public bool isModalOpened { get; set; }
    [Parameter]
    public EventCallback OnExpenseAdded { get; set; }

    private bool IsLoading = false;

    private List<TagsModel> tags = new List<TagsModel>();

    protected override async Task OnInitializedAsync()
    {
        tags = await TagsHelper.InitializeOrGetTags();
    }


    private TransactionModel ExpensesTransaction = new TransactionModel
        {
            transactionId = Guid.NewGuid().ToString(),
            transactionDate = DateTime.Now,
            transactionType = TransactionType.Expense
        };

  

    private async Task OnFinish(EditContext editContext)
    {
        if (ExpensesTransaction.transactionTagId == null)
        {
            await _message.Error("Please select a tag");
            return;
        }

        if (ExpensesTransaction.amount <= 0)
        {
            await _message.Error("Amount should be greater than 0");
            return;
        }
      
        try
        {
        
            IsLoading = true;
            await TransactionHelper.AddTransaction(ExpensesTransaction);
            await OnExpenseAdded.InvokeAsync();
            await _message.Success($"{ExpensesTransaction.title} is added");
            ResetForm();
        }catch{            
            await _message.Error("Failed to add Expenses");
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task  OnFinishFailed(EditContext editContext)
    {
        await _message.Error("Failed to add expenses");
    }

    protected override void OnParametersSet()
    {

        if (isModalOpened)
        {
            ResetForm();
        }
    }

    private void ResetForm()
    {
        ExpensesTransaction = new TransactionModel
            {
                transactionId = Guid.NewGuid().ToString(),
                transactionDate = DateTime.Now,
                transactionType = TransactionType.Expense
            };
    }
}
