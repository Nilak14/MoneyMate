@using MoneyMate.Models
@using MoneyMate.Helpers
@using MoneyMate.Components.ui
@inject GlobalState GlobalState

<Card Class="!rounded-lg !shadow-lg">
    <div class="space-y-2">
        <h2 class="text-xl font-bold md:text-2xl"><FormatNumber amount="@total"/></h2>
        <p class="text-base font-semibold">@content</p>
        <p class="text-sm text-gray-600">Total @TransactionType Transactions: @transactionCount</p>
    </div>
</Card>

@code {
    [Parameter]
    public TransactionType TransactionType { get; set; }
    [Parameter]
    public required string content { get; set; }
    [Parameter]
    public required Boolean isBalance { get; set; }
    private List<TransactionModel> allTransaction;
    private decimal total;
    private int transactionCount;

    protected override void OnInitialized()
    {
        allTransaction = TransactionHelper.GetAllTransactions();
        decimal expenses = allTransaction
              .Where(t => t.transactionType == TransactionType.Expense)
              .Sum(t => t.amount);
        GlobalState.setGlobalTotalExpenses(expenses);

        if(!isBalance)
        {
            if(TransactionType == TransactionType.Debt)
            {
                total = GetAllAmount.GetTotalDebt();
                transactionCount = GetTransactionCount(TransactionType.Debt);
            }
            else if(TransactionType == TransactionType.Income)
            {
                total = GetAllAmount.GetTotalIncome();
                transactionCount = GetTransactionCount(TransactionType.Income);
            }
            else if(TransactionType == TransactionType.Expense)
            {
                total = GetAllAmount.GetTotalExpenses();
                transactionCount = GetTransactionCount(TransactionType.Expense);
            }
        }
        else
        {
            total = GetAllAmount.GetTotalBalance();
            transactionCount = allTransaction.Count;
        }
    }

    private int GetTransactionCount(TransactionType type)
    {
        return allTransaction.Count(t => t.transactionType == type);
    }
}