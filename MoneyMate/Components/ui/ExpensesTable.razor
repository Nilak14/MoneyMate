@using MoneyMate.Helpers
@using MoneyMate.Models
@using System.Linq
@using System.Text.Json
@inject GlobalState GlobalState

<p>Total Expenses: <FormatNumber amount=@totalExpenses /></p>
<p>Total Balance: <FormatNumber amount=@totalBalance /></p>

<div class="mb-4 flex w-full items-center justify-between gap-20">
    <!-- Search Input -->
    <div class="w-[50vw]">
        <Input Placeholder="Search By Title" AllowClear="true" OnChange="onChange" TValue="string" />
    </div>

    <!-- Sort and Filter -->
    <div class="flex gap-5">
        <!-- Sort By Tag -->
        <Select OnSelectedItemChanged="FilterByTag" Placeholder="Sort By Tags" TItem="string" TItemValue="string" @bind-Value="selectedTagId">
            <SelectOptions>
                @foreach (var tag in allTags)
                {
                    <SelectOption TItem="string" TItemValue="string" Value="@tag.tagId" Label="@tag.tagName" />
                }
            </SelectOptions>
        </Select>


    </div>
</div>

<div class="overflow-x-auto">
    <table class="min-w-full table-auto rounded-lg text-white">
        <thead class="bg-green-700">
            <tr>
                <th class="cursor-pointer px-4 py-2">Title</th>
                <th class="cursor-pointer px-4 py-2">Amount</th>
                <th class="cursor-pointer px-4 py-2">Date</th>
                <th class="px-4 py-2">Tag</th>
            </tr>
        </thead>
        <tbody class="bg-green-400 text-center font-semibold text-black">
            @if (filteredTransactions.Count > 0)
            {
                @foreach (var transaction in filteredTransactions)
                {
                    var tag = allTags.FirstOrDefault(t => t.tagId == transaction.transactionTagId);
                    <tr class="border-b border-b-white last:border-none">
                        <td class="px-4 py-2">@transaction.title</td>
                        <td class="px-4 py-2">@transaction.amount</td>
                        <td class="px-4 py-2">@transaction.transactionDate?.ToShortDateString()</td>
                        <td class="flex items-center justify-center px-4 py-2 text-center">
                            <p class="w-fit rounded-xl bg-green-700 px-4 py-2 text-center text-white">
                                @tag?.tagName
                            </p>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="4" class="px-4 py-2 text-center">No transactions found.</td>
                </tr>
            }
        </tbody>
    </table>
</div>


@code {
    private List<TransactionModel> allTransaction;
    private List<TagsModel> allTags = new List<TagsModel>();
    private List<TransactionModel> filteredTransactions;
    private decimal totalExpenses = 0;
    private decimal totalBalance = 0;
    private string searchTerm = string.Empty;
    private string selectedTagId = string.Empty;
    private DateTime?[] selectedDateRange = new DateTime?[2];

    protected override async Task OnInitializedAsync()
    {
        allTransaction = TransactionHelper.GetAllTransactions();
        allTransaction = allTransaction.Where(t => t.transactionType == TransactionType.Expense).ToList();
        totalExpenses = allTransaction.Sum(t => t.amount);
        GlobalState.setGlobalTotalExpenses(totalExpenses);
        filteredTransactions = allTransaction;
        allTags = await TagsHelper.InitializeOrGetTags();
        totalBalance = GetAllAmount.GetTotalBalance();

    }
    public void RefreshTransactions()
    {
        allTransaction = TransactionHelper.GetAllTransactions();
        allTransaction = allTransaction.Where(t => t.transactionType == TransactionType.Expense).ToList();
        filteredTransactions = allTransaction;
        filteredTransactions = allTransaction;
        totalExpenses = allTransaction.Sum(t => t.amount);
        GlobalState.setGlobalTotalExpenses(totalExpenses);
        totalBalance = GetAllAmount.GetTotalBalance();
        StateHasChanged();
    }
    private void onChange(string value)
    {
        searchTerm = value;
        ApplyFilters();

    }

    private void FilterByTag()
    {
        ApplyFilters();


    }

    private void ApplyFilters()
    {
        filteredTransactions = allTransaction
            .Where(t => t.transactionType == TransactionType.Expense &&
                        (string.IsNullOrEmpty(searchTerm) || t.title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
                        (string.IsNullOrEmpty(selectedTagId) || t.transactionTagId == selectedTagId)).ToList();
    }



}
