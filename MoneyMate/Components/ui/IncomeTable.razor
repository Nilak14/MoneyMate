@using MoneyMate.Helpers
@using MoneyMate.Models
@using System.Linq
@using System.Text.Json

<div class="mb-4 flex w-full items-center justify-between gap-20">
    <!-- Search Input -->
    <div class="w-[50vw]">
        <Input Placeholder="Search By Title"
               AllowClear="true"
               @bind-Value="searchTerm"
               OnInput="HandleSearch"
               TValue="string" />
    </div>

    <!-- Sort and Filter -->
    <div class="flex gap-5">
        <!-- Sort By Tag -->
        <Select OnSelectedItemChanged="FilterByTag" Placeholder="Sort By Tags" TItem="string" TItemValue="string" @bind-Value="selectedTagId">
            <SelectOptions>
                @foreach (var tag in allTags)
                {
                    <SelectOption TItem="string" TItemValue="string" Value="@tag.tagId" Label="@tag.tagName" />
                }
            </SelectOptions>
        </Select>
    </div>
</div>

<div class="overflow-x-auto">
    <table class="min-w-full table-auto rounded-lg text-white">
        <thead class="bg-green-700">
            <tr>
                <th class="cursor-pointer px-4 py-2">Title</th>
                <th class="cursor-pointer px-4 py-2">Amount</th>
                <th class="cursor-pointer px-4 py-2">Date</th>
                <th class="px-4 py-2">Tag</th>
            </tr>
        </thead>
        <tbody class="bg-green-400 text-center font-semibold text-black">
            @if (filteredTransactions.Count > 0)
            {
                @foreach (var transaction in filteredTransactions)
                {
                    var tag = allTags.FirstOrDefault(t => t.tagId == transaction.transactionTagId);
                    <tr class="border-b border-b-white last:border-none">
                        <td class="px-4 py-2">@transaction.title</td>
                        <td class="px-4 py-2">@transaction.amount</td>
                        <td class="px-4 py-2">@transaction.transactionDate?.ToShortDateString()</td>
                        <td class="flex items-center justify-center px-4 py-2 text-center">
                            <p class="w-fit rounded-xl bg-green-700 px-4 py-2 text-center text-white">
                                @tag?.tagName
                            </p>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="4" class="px-4 py-2 text-center">No transactions found.</td>
                </tr>
            }
        </tbody>
    </table>
</div>
@* <p>@searchTerm</p>
<p>@selectedTagId</p>
<p>@JsonSerializer.Serialize(filteredTransactions)</p> *@

@code {
    private List<TransactionModel> allTransaction;
    private List<TagsModel> allTags = new List<TagsModel>();
    private List<TransactionModel> filteredTransactions;

    private string searchTerm = string.Empty;
    private string selectedTagId = string.Empty;
    private DateTime?[] selectedDateRange = new DateTime?[2];

    // Add debounce timer
    private System.Timers.Timer searchTimer;

    protected override async Task OnInitializedAsync()
    {
        allTransaction = TransactionHelper.GetAllTransactions();
        allTransaction = allTransaction.Where(t => t.transactionType == TransactionType.Income).ToList();
        filteredTransactions = allTransaction;
        allTags = await TagsHelper.InitializeOrGetTags();

        // Initialize debounce timer
        searchTimer = new System.Timers.Timer(300); // 300ms delay
        searchTimer.Elapsed += async (sender, e) => await SearchTimerElapsed();
        searchTimer.AutoReset = false;
    }

    private async Task HandleSearch(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;

        // Reset and restart the timer
        searchTimer.Stop();
        searchTimer.Start();
    }

    private async Task SearchTimerElapsed()
    {
        await InvokeAsync(() =>
        {
            ApplyFilters();
            StateHasChanged();
        });
    }

    public void RefreshTransactions()
    {
        allTransaction = TransactionHelper.GetAllTransactions();
        allTransaction = allTransaction.Where(t => t.transactionType == TransactionType.Income).ToList();
        filteredTransactions = allTransaction;
        StateHasChanged();
    }

    private void FilterByTag()
    {
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        try
        {
            filteredTransactions = allTransaction
                .Where(t => t.transactionType == TransactionType.Income &&
                           (string.IsNullOrEmpty(searchTerm) ||
                            t.title?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) == true) &&
                           (string.IsNullOrEmpty(selectedTagId) ||
                            t.transactionTagId == selectedTagId))
                .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error applying filters: {ex.Message}");
            filteredTransactions = new List<TransactionModel>();
        }
    }

    public void Dispose()
    {
        searchTimer?.Dispose();
    }
}